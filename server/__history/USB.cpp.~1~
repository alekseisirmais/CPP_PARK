//---------------------------------------------------------------------------

#pragma hdrstop

#include "USB.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)


USB::USB(int _vid, int _pid) {
	vid = _vid;
	pid = _pid;
}
const bool USB::operator != (const USB &_usb) {
	if ((vid != _usb.vid) || (pid != _usb.pid)) {
		return true;
	}
	return false;
}
const bool USB::operator == (const USB &_usb) {
	if ((vid == _usb.vid) && (pid == _usb.pid)) {
		return true;
	}
	return false;
}

std::vector<USB> GetUSBListFromDB(AnsiString &file) {
	TStringList *list1 = new TStringList;
	list1->LoadFromFile(file);
	std::vector<USB> res;

	for (int i = 0; i < list1->Count; i++) {
		AnsiString str = list1[0][i];
		int StrLenInt = str.Length();
		int SpacePlaceInt = str.Pos(" ");
		int pid = StrToInt(str.SubString(1, SpacePlaceInt - 1));
		//AnsiStrings always start with 1 and not 0
		int vid = StrToInt(str.SubString(SpacePlaceInt + 1, StrLenInt));
		USB usb(pid, vid);
		res.push_back(usb);
	}
	delete list1;
	return res;
}

bool USBIsOnDatabase(AnsiString &file, USB *usb) {
	std::vector<USB> USBList = GetUSBListFromDB(file);
	for (int i = 0; i < USBList.size(); i++) {
		if (USBList[i]== usb) {
			return true;
		}
	}
	return false;
}


int AddUsbToDatabase(AnsiString &file, USB *usb) {
	if (USBIsOnDatabase(file, usb)) {
		return USB_IS_ON_DB;
	}
	TStringList *list1 = new TStringList;
	AnsiString USBstring = IntToStr(usb->pid) + " " + IntToStr(usb->vid);
	list1->Add(USBstring);
	if (!FileExists(file)) {
		list1->SaveToFile(file);
		return 0;
	}

	TStringList *list2 = new TStringList;
	list2->LoadFromFile(file);

	list2->Text = list2->Text + list1->Text;
	list2->SaveToFile(file);
	delete list1;
	delete list2;
	return 0;
}